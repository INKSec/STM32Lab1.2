
Labor1_Teil2.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800386c  0800386c  0001386c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a4  080038a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080038a4  080038a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038a4  080038a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038a8  080038a8  000138a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d1db  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000171f  00000000  00000000  0002d217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b80  00000000  00000000  0002e938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000af8  00000000  00000000  0002f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f284  00000000  00000000  0002ffb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d88a  00000000  00000000  0004f234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000beeca  00000000  00000000  0005cabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011b988  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030ac  00000000  00000000  0011b9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003854 	.word	0x08003854

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003854 	.word	0x08003854

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 faa6 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f832 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f918 	bl	8000408 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f8e6 	bl	80003a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80001dc:	f000 f86e 	bl	80002bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
D = 10;
 80001e0:	4b13      	ldr	r3, [pc, #76]	; (8000230 <main+0x68>)
 80001e2:	220a      	movs	r2, #10
 80001e4:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001e6:	2104      	movs	r1, #4
 80001e8:	4812      	ldr	r0, [pc, #72]	; (8000234 <main+0x6c>)
 80001ea:	f002 f8bd 	bl	8002368 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (D_COUNTER/100)*D);
 80001ee:	4b10      	ldr	r3, [pc, #64]	; (8000230 <main+0x68>)
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <main+0x6c>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	00d2      	lsls	r2, r2, #3
 80001f8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(D=1; D<=100; D++) {
 80001fa:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <main+0x68>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	e011      	b.n	8000226 <main+0x5e>
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000202:	2104      	movs	r1, #4
 8000204:	480b      	ldr	r0, [pc, #44]	; (8000234 <main+0x6c>)
 8000206:	f002 f8af 	bl	8002368 <HAL_TIM_PWM_Start>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, (D_COUNTER/100)*D);
 800020a:	4b09      	ldr	r3, [pc, #36]	; (8000230 <main+0x68>)
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <main+0x6c>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	00d2      	lsls	r2, r2, #3
 8000214:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_Delay(100);
 8000216:	2064      	movs	r0, #100	; 0x64
 8000218:	f000 fae6 	bl	80007e8 <HAL_Delay>
	  for(D=1; D<=100; D++) {
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <main+0x68>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	3301      	adds	r3, #1
 8000222:	4a03      	ldr	r2, [pc, #12]	; (8000230 <main+0x68>)
 8000224:	6013      	str	r3, [r2, #0]
 8000226:	4b02      	ldr	r3, [pc, #8]	; (8000230 <main+0x68>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	2b64      	cmp	r3, #100	; 0x64
 800022c:	d9e9      	bls.n	8000202 <main+0x3a>
 800022e:	e7e4      	b.n	80001fa <main+0x32>
 8000230:	200000f8 	.word	0x200000f8
 8000234:	20000028 	.word	0x20000028

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b090      	sub	sp, #64	; 0x40
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f003 fafc 	bl	8003844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025a:	2302      	movs	r3, #2
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000262:	2310      	movs	r3, #16
 8000264:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000266:	2302      	movs	r3, #2
 8000268:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800026a:	2300      	movs	r3, #0
 800026c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800026e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000272:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	f107 0318 	add.w	r3, r7, #24
 8000278:	4618      	mov	r0, r3
 800027a:	f000 fd49 	bl	8000d10 <HAL_RCC_OscConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000284:	f000 f926 	bl	80004d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000288:	230f      	movs	r3, #15
 800028a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028c:	2302      	movs	r3, #2
 800028e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2102      	movs	r1, #2
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 fd72 	bl	8001d8c <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ae:	f000 f911 	bl	80004d4 <Error_Handler>
  }
}
 80002b2:	bf00      	nop
 80002b4:	3740      	adds	r7, #64	; 0x40
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b08e      	sub	sp, #56	; 0x38
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d0:	f107 031c 	add.w	r3, r7, #28
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002dc:	463b      	mov	r3, r7
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]
 80002ea:	615a      	str	r2, [r3, #20]
 80002ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002ee:	4b2d      	ldr	r3, [pc, #180]	; (80003a4 <MX_TIM2_Init+0xe8>)
 80002f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002f6:	4b2b      	ldr	r3, [pc, #172]	; (80003a4 <MX_TIM2_Init+0xe8>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002fc:	4b29      	ldr	r3, [pc, #164]	; (80003a4 <MX_TIM2_Init+0xe8>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = D_COUNTER;
 8000302:	4b28      	ldr	r3, [pc, #160]	; (80003a4 <MX_TIM2_Init+0xe8>)
 8000304:	f240 3247 	movw	r2, #839	; 0x347
 8000308:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800030a:	4b26      	ldr	r3, [pc, #152]	; (80003a4 <MX_TIM2_Init+0xe8>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000310:	4b24      	ldr	r3, [pc, #144]	; (80003a4 <MX_TIM2_Init+0xe8>)
 8000312:	2200      	movs	r2, #0
 8000314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000316:	4823      	ldr	r0, [pc, #140]	; (80003a4 <MX_TIM2_Init+0xe8>)
 8000318:	f001 ff6e 	bl	80021f8 <HAL_TIM_Base_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000322:	f000 f8d7 	bl	80004d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800032a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800032c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000330:	4619      	mov	r1, r3
 8000332:	481c      	ldr	r0, [pc, #112]	; (80003a4 <MX_TIM2_Init+0xe8>)
 8000334:	f002 fa18 	bl	8002768 <HAL_TIM_ConfigClockSource>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800033e:	f000 f8c9 	bl	80004d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000342:	4818      	ldr	r0, [pc, #96]	; (80003a4 <MX_TIM2_Init+0xe8>)
 8000344:	f001 ffaf 	bl	80022a6 <HAL_TIM_PWM_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800034e:	f000 f8c1 	bl	80004d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000352:	2300      	movs	r3, #0
 8000354:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000356:	2300      	movs	r3, #0
 8000358:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800035a:	f107 031c 	add.w	r3, r7, #28
 800035e:	4619      	mov	r1, r3
 8000360:	4810      	ldr	r0, [pc, #64]	; (80003a4 <MX_TIM2_Init+0xe8>)
 8000362:	f002 fea9 	bl	80030b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800036c:	f000 f8b2 	bl	80004d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000370:	2360      	movs	r3, #96	; 0x60
 8000372:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000378:	2300      	movs	r3, #0
 800037a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800037c:	2300      	movs	r3, #0
 800037e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000380:	463b      	mov	r3, r7
 8000382:	2204      	movs	r2, #4
 8000384:	4619      	mov	r1, r3
 8000386:	4807      	ldr	r0, [pc, #28]	; (80003a4 <MX_TIM2_Init+0xe8>)
 8000388:	f002 f8da 	bl	8002540 <HAL_TIM_PWM_ConfigChannel>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000392:	f000 f89f 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000396:	4803      	ldr	r0, [pc, #12]	; (80003a4 <MX_TIM2_Init+0xe8>)
 8000398:	f000 f8e4 	bl	8000564 <HAL_TIM_MspPostInit>

}
 800039c:	bf00      	nop
 800039e:	3738      	adds	r7, #56	; 0x38
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000028 	.word	0x20000028

080003a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003ae:	4a15      	ldr	r2, [pc, #84]	; (8000404 <MX_USART2_UART_Init+0x5c>)
 80003b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003b4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b09      	ldr	r3, [pc, #36]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ea:	4805      	ldr	r0, [pc, #20]	; (8000400 <MX_USART2_UART_Init+0x58>)
 80003ec:	f002 fed2 	bl	8003194 <HAL_UART_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003f6:	f000 f86d 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000074 	.word	0x20000074
 8000404:	40004400 	.word	0x40004400

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b08a      	sub	sp, #40	; 0x28
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	f107 0314 	add.w	r3, r7, #20
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041e:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <MX_GPIO_Init+0xc4>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a2a      	ldr	r2, [pc, #168]	; (80004cc <MX_GPIO_Init+0xc4>)
 8000424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b28      	ldr	r3, [pc, #160]	; (80004cc <MX_GPIO_Init+0xc4>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000432:	613b      	str	r3, [r7, #16]
 8000434:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000436:	4b25      	ldr	r3, [pc, #148]	; (80004cc <MX_GPIO_Init+0xc4>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a24      	ldr	r2, [pc, #144]	; (80004cc <MX_GPIO_Init+0xc4>)
 800043c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b22      	ldr	r3, [pc, #136]	; (80004cc <MX_GPIO_Init+0xc4>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b1f      	ldr	r3, [pc, #124]	; (80004cc <MX_GPIO_Init+0xc4>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a1e      	ldr	r2, [pc, #120]	; (80004cc <MX_GPIO_Init+0xc4>)
 8000454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b1c      	ldr	r3, [pc, #112]	; (80004cc <MX_GPIO_Init+0xc4>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000466:	4b19      	ldr	r3, [pc, #100]	; (80004cc <MX_GPIO_Init+0xc4>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a18      	ldr	r2, [pc, #96]	; (80004cc <MX_GPIO_Init+0xc4>)
 800046c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b16      	ldr	r3, [pc, #88]	; (80004cc <MX_GPIO_Init+0xc4>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2120      	movs	r1, #32
 8000482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000486:	f000 fc2b 	bl	8000ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800048a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800048e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000490:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	4619      	mov	r1, r3
 80004a0:	480b      	ldr	r0, [pc, #44]	; (80004d0 <MX_GPIO_Init+0xc8>)
 80004a2:	f000 faab 	bl	80009fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004a6:	2320      	movs	r3, #32
 80004a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2300      	movs	r3, #0
 80004b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004b6:	f107 0314 	add.w	r3, r7, #20
 80004ba:	4619      	mov	r1, r3
 80004bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c0:	f000 fa9c 	bl	80009fc <HAL_GPIO_Init>

}
 80004c4:	bf00      	nop
 80004c6:	3728      	adds	r7, #40	; 0x28
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40021000 	.word	0x40021000
 80004d0:	48000800 	.word	0x48000800

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d8:	b672      	cpsid	i
}
 80004da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004dc:	e7fe      	b.n	80004dc <Error_Handler+0x8>
	...

080004e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <HAL_MspInit+0x44>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_MspInit+0x44>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <HAL_MspInit+0x44>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <HAL_MspInit+0x44>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	4a08      	ldr	r2, [pc, #32]	; (8000524 <HAL_MspInit+0x44>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000508:	61d3      	str	r3, [r2, #28]
 800050a:	4b06      	ldr	r3, [pc, #24]	; (8000524 <HAL_MspInit+0x44>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000516:	2007      	movs	r0, #7
 8000518:	f000 fa3c 	bl	8000994 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000538:	d10b      	bne.n	8000552 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <HAL_TIM_Base_MspInit+0x38>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	4a08      	ldr	r2, [pc, #32]	; (8000560 <HAL_TIM_Base_MspInit+0x38>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	61d3      	str	r3, [r2, #28]
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <HAL_TIM_Base_MspInit+0x38>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000

08000564 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000584:	d11c      	bne.n	80005c0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <HAL_TIM_MspPostInit+0x64>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a0f      	ldr	r2, [pc, #60]	; (80005c8 <HAL_TIM_MspPostInit+0x64>)
 800058c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <HAL_TIM_MspPostInit+0x64>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800059e:	2302      	movs	r3, #2
 80005a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80005ae:	2301      	movs	r3, #1
 80005b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	4619      	mov	r1, r3
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005bc:	f000 fa1e 	bl	80009fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80005c0:	bf00      	nop
 80005c2:	3720      	adds	r7, #32
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40021000 	.word	0x40021000

080005cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	; 0x28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a17      	ldr	r2, [pc, #92]	; (8000648 <HAL_UART_MspInit+0x7c>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d128      	bne.n	8000640 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <HAL_UART_MspInit+0x80>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a16      	ldr	r2, [pc, #88]	; (800064c <HAL_UART_MspInit+0x80>)
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <HAL_UART_MspInit+0x80>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <HAL_UART_MspInit+0x80>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a10      	ldr	r2, [pc, #64]	; (800064c <HAL_UART_MspInit+0x80>)
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <HAL_UART_MspInit+0x80>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800061e:	230c      	movs	r3, #12
 8000620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000622:	2302      	movs	r3, #2
 8000624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062a:	2303      	movs	r3, #3
 800062c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800062e:	2307      	movs	r3, #7
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f000 f9de 	bl	80009fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40004400 	.word	0x40004400
 800064c:	40021000 	.word	0x40021000

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <NMI_Handler+0x4>

08000656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <HardFault_Handler+0x4>

0800065c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <MemManage_Handler+0x4>

08000662 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000666:	e7fe      	b.n	8000666 <BusFault_Handler+0x4>

08000668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066c:	e7fe      	b.n	800066c <UsageFault_Handler+0x4>

0800066e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069c:	f000 f884 	bl	80007a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <SystemInit+0x20>)
 80006aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <SystemInit+0x20>)
 80006b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000700 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ce:	490e      	ldr	r1, [pc, #56]	; (8000708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d0:	4a0e      	ldr	r2, [pc, #56]	; (800070c <LoopForever+0xe>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e4:	4c0b      	ldr	r4, [pc, #44]	; (8000714 <LoopForever+0x16>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006f2:	f7ff ffd7 	bl	80006a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f6:	f003 f881 	bl	80037fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006fa:	f7ff fd65 	bl	80001c8 <main>

080006fe <LoopForever>:

LoopForever:
    b LoopForever
 80006fe:	e7fe      	b.n	80006fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000700:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800070c:	080038ac 	.word	0x080038ac
  ldr r2, =_sbss
 8000710:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000714:	20000100 	.word	0x20000100

08000718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_2_IRQHandler>
	...

0800071c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_Init+0x28>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_Init+0x28>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f931 	bl	8000994 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	2000      	movs	r0, #0
 8000734:	f000 f808 	bl	8000748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff fed2 	bl	80004e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40022000 	.word	0x40022000

08000748 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x54>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 f93b 	bl	80009e2 <HAL_SYSTICK_Config>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e00e      	b.n	8000794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d80a      	bhi.n	8000792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077c:	2200      	movs	r2, #0
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f000 f911 	bl	80009aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <HAL_InitTick+0x5c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	e000      	b.n	8000794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_IncTick+0x20>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_IncTick+0x24>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <HAL_IncTick+0x24>)
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000008 	.word	0x20000008
 80007cc:	200000fc 	.word	0x200000fc

080007d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <HAL_GetTick+0x14>)
 80007d6:	681b      	ldr	r3, [r3, #0]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	200000fc 	.word	0x200000fc

080007e8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f0:	f7ff ffee 	bl	80007d0 <HAL_GetTick>
 80007f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000800:	d005      	beq.n	800080e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_Delay+0x44>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	4413      	add	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800080e:	bf00      	nop
 8000810:	f7ff ffde 	bl	80007d0 <HAL_GetTick>
 8000814:	4602      	mov	r2, r0
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	429a      	cmp	r2, r3
 800081e:	d8f7      	bhi.n	8000810 <HAL_Delay+0x28>
  {
  }
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	3710      	adds	r7, #16
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000008 	.word	0x20000008

08000830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <__NVIC_SetPriorityGrouping+0x44>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800084c:	4013      	ands	r3, r2
 800084e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800085c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000862:	4a04      	ldr	r2, [pc, #16]	; (8000874 <__NVIC_SetPriorityGrouping+0x44>)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	60d3      	str	r3, [r2, #12]
}
 8000868:	bf00      	nop
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <__NVIC_GetPriorityGrouping+0x18>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	f003 0307 	and.w	r3, r3, #7
}
 8000886:	4618      	mov	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	db0a      	blt.n	80008be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	490c      	ldr	r1, [pc, #48]	; (80008e0 <__NVIC_SetPriority+0x4c>)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	0112      	lsls	r2, r2, #4
 80008b4:	b2d2      	uxtb	r2, r2
 80008b6:	440b      	add	r3, r1
 80008b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008bc:	e00a      	b.n	80008d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4908      	ldr	r1, [pc, #32]	; (80008e4 <__NVIC_SetPriority+0x50>)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	f003 030f 	and.w	r3, r3, #15
 80008ca:	3b04      	subs	r3, #4
 80008cc:	0112      	lsls	r2, r2, #4
 80008ce:	b2d2      	uxtb	r2, r2
 80008d0:	440b      	add	r3, r1
 80008d2:	761a      	strb	r2, [r3, #24]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000e100 	.word	0xe000e100
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	f1c3 0307 	rsb	r3, r3, #7
 8000902:	2b04      	cmp	r3, #4
 8000904:	bf28      	it	cs
 8000906:	2304      	movcs	r3, #4
 8000908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3304      	adds	r3, #4
 800090e:	2b06      	cmp	r3, #6
 8000910:	d902      	bls.n	8000918 <NVIC_EncodePriority+0x30>
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3b03      	subs	r3, #3
 8000916:	e000      	b.n	800091a <NVIC_EncodePriority+0x32>
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091c:	f04f 32ff 	mov.w	r2, #4294967295
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43da      	mvns	r2, r3
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	401a      	ands	r2, r3
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000930:	f04f 31ff 	mov.w	r1, #4294967295
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	fa01 f303 	lsl.w	r3, r1, r3
 800093a:	43d9      	mvns	r1, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	4313      	orrs	r3, r2
         );
}
 8000942:	4618      	mov	r0, r3
 8000944:	3724      	adds	r7, #36	; 0x24
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
	...

08000950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3b01      	subs	r3, #1
 800095c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000960:	d301      	bcc.n	8000966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000962:	2301      	movs	r3, #1
 8000964:	e00f      	b.n	8000986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <SysTick_Config+0x40>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096e:	210f      	movs	r1, #15
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	f7ff ff8e 	bl	8000894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <SysTick_Config+0x40>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097e:	4b04      	ldr	r3, [pc, #16]	; (8000990 <SysTick_Config+0x40>)
 8000980:	2207      	movs	r2, #7
 8000982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	e000e010 	.word	0xe000e010

08000994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff ff47 	bl	8000830 <__NVIC_SetPriorityGrouping>
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	4603      	mov	r3, r0
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
 80009b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009bc:	f7ff ff5c 	bl	8000878 <__NVIC_GetPriorityGrouping>
 80009c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	68b9      	ldr	r1, [r7, #8]
 80009c6:	6978      	ldr	r0, [r7, #20]
 80009c8:	f7ff ff8e 	bl	80008e8 <NVIC_EncodePriority>
 80009cc:	4602      	mov	r2, r0
 80009ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d2:	4611      	mov	r1, r2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff5d 	bl	8000894 <__NVIC_SetPriority>
}
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff ffb0 	bl	8000950 <SysTick_Config>
 80009f0:	4603      	mov	r3, r0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0a:	e14e      	b.n	8000caa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	2101      	movs	r1, #1
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	fa01 f303 	lsl.w	r3, r1, r3
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f000 8140 	beq.w	8000ca4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f003 0303 	and.w	r3, r3, #3
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d005      	beq.n	8000a3c <HAL_GPIO_Init+0x40>
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 0303 	and.w	r3, r3, #3
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	d130      	bne.n	8000a9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	2203      	movs	r2, #3
 8000a48:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	4013      	ands	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	68da      	ldr	r2, [r3, #12]
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a72:	2201      	movs	r2, #1
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	091b      	lsrs	r3, r3, #4
 8000a88:	f003 0201 	and.w	r2, r3, #1
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f003 0303 	and.w	r3, r3, #3
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	d017      	beq.n	8000ada <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d123      	bne.n	8000b2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	08da      	lsrs	r2, r3, #3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3208      	adds	r2, #8
 8000aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	220f      	movs	r2, #15
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43db      	mvns	r3, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	691a      	ldr	r2, [r3, #16]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	f003 0307 	and.w	r3, r3, #7
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	08da      	lsrs	r2, r3, #3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3208      	adds	r2, #8
 8000b28:	6939      	ldr	r1, [r7, #16]
 8000b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	2203      	movs	r2, #3
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4013      	ands	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f003 0203 	and.w	r2, r3, #3
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f000 809a 	beq.w	8000ca4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b70:	4b55      	ldr	r3, [pc, #340]	; (8000cc8 <HAL_GPIO_Init+0x2cc>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a54      	ldr	r2, [pc, #336]	; (8000cc8 <HAL_GPIO_Init+0x2cc>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b52      	ldr	r3, [pc, #328]	; (8000cc8 <HAL_GPIO_Init+0x2cc>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b88:	4a50      	ldr	r2, [pc, #320]	; (8000ccc <HAL_GPIO_Init+0x2d0>)
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	089b      	lsrs	r3, r3, #2
 8000b8e:	3302      	adds	r3, #2
 8000b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	220f      	movs	r2, #15
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bb2:	d013      	beq.n	8000bdc <HAL_GPIO_Init+0x1e0>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a46      	ldr	r2, [pc, #280]	; (8000cd0 <HAL_GPIO_Init+0x2d4>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d00d      	beq.n	8000bd8 <HAL_GPIO_Init+0x1dc>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a45      	ldr	r2, [pc, #276]	; (8000cd4 <HAL_GPIO_Init+0x2d8>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d007      	beq.n	8000bd4 <HAL_GPIO_Init+0x1d8>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a44      	ldr	r2, [pc, #272]	; (8000cd8 <HAL_GPIO_Init+0x2dc>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d101      	bne.n	8000bd0 <HAL_GPIO_Init+0x1d4>
 8000bcc:	2303      	movs	r3, #3
 8000bce:	e006      	b.n	8000bde <HAL_GPIO_Init+0x1e2>
 8000bd0:	2305      	movs	r3, #5
 8000bd2:	e004      	b.n	8000bde <HAL_GPIO_Init+0x1e2>
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	e002      	b.n	8000bde <HAL_GPIO_Init+0x1e2>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e000      	b.n	8000bde <HAL_GPIO_Init+0x1e2>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	697a      	ldr	r2, [r7, #20]
 8000be0:	f002 0203 	and.w	r2, r2, #3
 8000be4:	0092      	lsls	r2, r2, #2
 8000be6:	4093      	lsls	r3, r2
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bee:	4937      	ldr	r1, [pc, #220]	; (8000ccc <HAL_GPIO_Init+0x2d0>)
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	3302      	adds	r3, #2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bfc:	4b37      	ldr	r3, [pc, #220]	; (8000cdc <HAL_GPIO_Init+0x2e0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	43db      	mvns	r3, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c20:	4a2e      	ldr	r2, [pc, #184]	; (8000cdc <HAL_GPIO_Init+0x2e0>)
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c26:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <HAL_GPIO_Init+0x2e0>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c4a:	4a24      	ldr	r2, [pc, #144]	; (8000cdc <HAL_GPIO_Init+0x2e0>)
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c50:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <HAL_GPIO_Init+0x2e0>)
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d003      	beq.n	8000c74 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c74:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <HAL_GPIO_Init+0x2e0>)
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_GPIO_Init+0x2e0>)
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <HAL_GPIO_Init+0x2e0>)
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f47f aea9 	bne.w	8000a0c <HAL_GPIO_Init+0x10>
  }
}
 8000cba:	bf00      	nop
 8000cbc:	bf00      	nop
 8000cbe:	371c      	adds	r7, #28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40010000 	.word	0x40010000
 8000cd0:	48000400 	.word	0x48000400
 8000cd4:	48000800 	.word	0x48000800
 8000cd8:	48000c00 	.word	0x48000c00
 8000cdc:	40010400 	.word	0x40010400

08000ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	807b      	strh	r3, [r7, #2]
 8000cec:	4613      	mov	r3, r2
 8000cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cf0:	787b      	ldrb	r3, [r7, #1]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cf6:	887a      	ldrh	r2, [r7, #2]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cfc:	e002      	b.n	8000d04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cfe:	887a      	ldrh	r2, [r7, #2]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d20:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	f001 b823 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f000 817d 	beq.w	8001046 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d4c:	4bbc      	ldr	r3, [pc, #752]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 030c 	and.w	r3, r3, #12
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	d00c      	beq.n	8000d72 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d58:	4bb9      	ldr	r3, [pc, #740]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 030c 	and.w	r3, r3, #12
 8000d60:	2b08      	cmp	r3, #8
 8000d62:	d15c      	bne.n	8000e1e <HAL_RCC_OscConfig+0x10e>
 8000d64:	4bb6      	ldr	r3, [pc, #728]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d70:	d155      	bne.n	8000e1e <HAL_RCC_OscConfig+0x10e>
 8000d72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d76:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d7e:	fa93 f3a3 	rbit	r3, r3
 8000d82:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d86:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8a:	fab3 f383 	clz	r3, r3
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	095b      	lsrs	r3, r3, #5
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d102      	bne.n	8000da4 <HAL_RCC_OscConfig+0x94>
 8000d9e:	4ba8      	ldr	r3, [pc, #672]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	e015      	b.n	8000dd0 <HAL_RCC_OscConfig+0xc0>
 8000da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000da8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dac:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000db0:	fa93 f3a3 	rbit	r3, r3
 8000db4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000db8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dbc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000dc0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000dc4:	fa93 f3a3 	rbit	r3, r3
 8000dc8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000dcc:	4b9c      	ldr	r3, [pc, #624]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dd4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000dd8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000ddc:	fa92 f2a2 	rbit	r2, r2
 8000de0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000de4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000de8:	fab2 f282 	clz	r2, r2
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	f042 0220 	orr.w	r2, r2, #32
 8000df2:	b2d2      	uxtb	r2, r2
 8000df4:	f002 021f 	and.w	r2, r2, #31
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f000 811f 	beq.w	8001044 <HAL_RCC_OscConfig+0x334>
 8000e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 8116 	bne.w	8001044 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	f000 bfaf 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e2e:	d106      	bne.n	8000e3e <HAL_RCC_OscConfig+0x12e>
 8000e30:	4b83      	ldr	r3, [pc, #524]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a82      	ldr	r2, [pc, #520]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	e036      	b.n	8000eac <HAL_RCC_OscConfig+0x19c>
 8000e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10c      	bne.n	8000e68 <HAL_RCC_OscConfig+0x158>
 8000e4e:	4b7c      	ldr	r3, [pc, #496]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a7b      	ldr	r2, [pc, #492]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	4b79      	ldr	r3, [pc, #484]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a78      	ldr	r2, [pc, #480]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	e021      	b.n	8000eac <HAL_RCC_OscConfig+0x19c>
 8000e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e78:	d10c      	bne.n	8000e94 <HAL_RCC_OscConfig+0x184>
 8000e7a:	4b71      	ldr	r3, [pc, #452]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a70      	ldr	r2, [pc, #448]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	4b6e      	ldr	r3, [pc, #440]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a6d      	ldr	r2, [pc, #436]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	e00b      	b.n	8000eac <HAL_RCC_OscConfig+0x19c>
 8000e94:	4b6a      	ldr	r3, [pc, #424]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a69      	ldr	r2, [pc, #420]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	4b67      	ldr	r3, [pc, #412]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a66      	ldr	r2, [pc, #408]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eaa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000eac:	4b64      	ldr	r3, [pc, #400]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb0:	f023 020f 	bic.w	r2, r3, #15
 8000eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	495f      	ldr	r1, [pc, #380]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d059      	beq.n	8000f8a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed6:	f7ff fc7b 	bl	80007d0 <HAL_GetTick>
 8000eda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ede:	e00a      	b.n	8000ef6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee0:	f7ff fc76 	bl	80007d0 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b64      	cmp	r3, #100	; 0x64
 8000eee:	d902      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	f000 bf43 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>
 8000ef6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000efa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f02:	fa93 f3a3 	rbit	r3, r3
 8000f06:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f0a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0e:	fab3 f383 	clz	r3, r3
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	095b      	lsrs	r3, r3, #5
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d102      	bne.n	8000f28 <HAL_RCC_OscConfig+0x218>
 8000f22:	4b47      	ldr	r3, [pc, #284]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	e015      	b.n	8000f54 <HAL_RCC_OscConfig+0x244>
 8000f28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f34:	fa93 f3a3 	rbit	r3, r3
 8000f38:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f40:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f44:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f48:	fa93 f3a3 	rbit	r3, r3
 8000f4c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f50:	4b3b      	ldr	r3, [pc, #236]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f58:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f5c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f60:	fa92 f2a2 	rbit	r2, r2
 8000f64:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f68:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f6c:	fab2 f282 	clz	r2, r2
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	f042 0220 	orr.w	r2, r2, #32
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	f002 021f 	and.w	r2, r2, #31
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f82:	4013      	ands	r3, r2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d0ab      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x1d0>
 8000f88:	e05d      	b.n	8001046 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fc21 	bl	80007d0 <HAL_GetTick>
 8000f8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f92:	e00a      	b.n	8000faa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fc1c 	bl	80007d0 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b64      	cmp	r3, #100	; 0x64
 8000fa2:	d902      	bls.n	8000faa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	f000 bee9 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>
 8000faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fae:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000fb6:	fa93 f3a3 	rbit	r3, r3
 8000fba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000fbe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc2:	fab3 f383 	clz	r3, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	095b      	lsrs	r3, r3, #5
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d102      	bne.n	8000fdc <HAL_RCC_OscConfig+0x2cc>
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	e015      	b.n	8001008 <HAL_RCC_OscConfig+0x2f8>
 8000fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000fe8:	fa93 f3a3 	rbit	r3, r3
 8000fec:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000ff8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <HAL_RCC_OscConfig+0x330>)
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800100c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001010:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001014:	fa92 f2a2 	rbit	r2, r2
 8001018:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800101c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001020:	fab2 f282 	clz	r2, r2
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	f042 0220 	orr.w	r2, r2, #32
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	f002 021f 	and.w	r2, r2, #31
 8001030:	2101      	movs	r1, #1
 8001032:	fa01 f202 	lsl.w	r2, r1, r2
 8001036:	4013      	ands	r3, r2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1ab      	bne.n	8000f94 <HAL_RCC_OscConfig+0x284>
 800103c:	e003      	b.n	8001046 <HAL_RCC_OscConfig+0x336>
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800104a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 817d 	beq.w	8001356 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800105c:	4ba6      	ldr	r3, [pc, #664]	; (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 030c 	and.w	r3, r3, #12
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00b      	beq.n	8001080 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001068:	4ba3      	ldr	r3, [pc, #652]	; (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	2b08      	cmp	r3, #8
 8001072:	d172      	bne.n	800115a <HAL_RCC_OscConfig+0x44a>
 8001074:	4ba0      	ldr	r3, [pc, #640]	; (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d16c      	bne.n	800115a <HAL_RCC_OscConfig+0x44a>
 8001080:	2302      	movs	r3, #2
 8001082:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001086:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800108a:	fa93 f3a3 	rbit	r3, r3
 800108e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001092:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001096:	fab3 f383 	clz	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	095b      	lsrs	r3, r3, #5
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d102      	bne.n	80010b0 <HAL_RCC_OscConfig+0x3a0>
 80010aa:	4b93      	ldr	r3, [pc, #588]	; (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	e013      	b.n	80010d8 <HAL_RCC_OscConfig+0x3c8>
 80010b0:	2302      	movs	r3, #2
 80010b2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80010ba:	fa93 f3a3 	rbit	r3, r3
 80010be:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010cc:	fa93 f3a3 	rbit	r3, r3
 80010d0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80010d4:	4b88      	ldr	r3, [pc, #544]	; (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 80010d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d8:	2202      	movs	r2, #2
 80010da:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80010de:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80010e2:	fa92 f2a2 	rbit	r2, r2
 80010e6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80010ea:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80010ee:	fab2 f282 	clz	r2, r2
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	f042 0220 	orr.w	r2, r2, #32
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	f002 021f 	and.w	r2, r2, #31
 80010fe:	2101      	movs	r1, #1
 8001100:	fa01 f202 	lsl.w	r2, r1, r2
 8001104:	4013      	ands	r3, r2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00a      	beq.n	8001120 <HAL_RCC_OscConfig+0x410>
 800110a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800110e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d002      	beq.n	8001120 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	f000 be2e 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001120:	4b75      	ldr	r3, [pc, #468]	; (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800112c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	21f8      	movs	r1, #248	; 0xf8
 8001136:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800113e:	fa91 f1a1 	rbit	r1, r1
 8001142:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001146:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800114a:	fab1 f181 	clz	r1, r1
 800114e:	b2c9      	uxtb	r1, r1
 8001150:	408b      	lsls	r3, r1
 8001152:	4969      	ldr	r1, [pc, #420]	; (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 8001154:	4313      	orrs	r3, r2
 8001156:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001158:	e0fd      	b.n	8001356 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800115a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800115e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	691b      	ldr	r3, [r3, #16]
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 8088 	beq.w	800127c <HAL_RCC_OscConfig+0x56c>
 800116c:	2301      	movs	r3, #1
 800116e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800117e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800118c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	461a      	mov	r2, r3
 8001194:	2301      	movs	r3, #1
 8001196:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff fb1a 	bl	80007d0 <HAL_GetTick>
 800119c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a0:	e00a      	b.n	80011b8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011a2:	f7ff fb15 	bl	80007d0 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d902      	bls.n	80011b8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	f000 bde2 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>
 80011b8:	2302      	movs	r3, #2
 80011ba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011be:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011c2:	fa93 f3a3 	rbit	r3, r3
 80011c6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80011ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ce:	fab3 f383 	clz	r3, r3
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	095b      	lsrs	r3, r3, #5
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d102      	bne.n	80011e8 <HAL_RCC_OscConfig+0x4d8>
 80011e2:	4b45      	ldr	r3, [pc, #276]	; (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	e013      	b.n	8001210 <HAL_RCC_OscConfig+0x500>
 80011e8:	2302      	movs	r3, #2
 80011ea:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80011f2:	fa93 f3a3 	rbit	r3, r3
 80011f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001200:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800120c:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	2202      	movs	r2, #2
 8001212:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001216:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800121a:	fa92 f2a2 	rbit	r2, r2
 800121e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001222:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001226:	fab2 f282 	clz	r2, r2
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	f042 0220 	orr.w	r2, r2, #32
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	f002 021f 	and.w	r2, r2, #31
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f202 	lsl.w	r2, r1, r2
 800123c:	4013      	ands	r3, r2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0af      	beq.n	80011a2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800124e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	21f8      	movs	r1, #248	; 0xf8
 8001258:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001260:	fa91 f1a1 	rbit	r1, r1
 8001264:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001268:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800126c:	fab1 f181 	clz	r1, r1
 8001270:	b2c9      	uxtb	r1, r1
 8001272:	408b      	lsls	r3, r1
 8001274:	4920      	ldr	r1, [pc, #128]	; (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
 800127a:	e06c      	b.n	8001356 <HAL_RCC_OscConfig+0x646>
 800127c:	2301      	movs	r3, #1
 800127e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800128e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001292:	fab3 f383 	clz	r3, r3
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800129c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	461a      	mov	r2, r3
 80012a4:	2300      	movs	r3, #0
 80012a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fa92 	bl	80007d0 <HAL_GetTick>
 80012ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b0:	e00a      	b.n	80012c8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b2:	f7ff fa8d 	bl	80007d0 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d902      	bls.n	80012c8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	f000 bd5a 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>
 80012c8:	2302      	movs	r3, #2
 80012ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012d2:	fa93 f3a3 	rbit	r3, r3
 80012d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80012da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012de:	fab3 f383 	clz	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	095b      	lsrs	r3, r3, #5
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d104      	bne.n	80012fc <HAL_RCC_OscConfig+0x5ec>
 80012f2:	4b01      	ldr	r3, [pc, #4]	; (80012f8 <HAL_RCC_OscConfig+0x5e8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	e015      	b.n	8001324 <HAL_RCC_OscConfig+0x614>
 80012f8:	40021000 	.word	0x40021000
 80012fc:	2302      	movs	r3, #2
 80012fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001306:	fa93 f3a3 	rbit	r3, r3
 800130a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800130e:	2302      	movs	r3, #2
 8001310:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001314:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001318:	fa93 f3a3 	rbit	r3, r3
 800131c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001320:	4bc8      	ldr	r3, [pc, #800]	; (8001644 <HAL_RCC_OscConfig+0x934>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	2202      	movs	r2, #2
 8001326:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800132a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800132e:	fa92 f2a2 	rbit	r2, r2
 8001332:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001336:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800133a:	fab2 f282 	clz	r2, r2
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	f042 0220 	orr.w	r2, r2, #32
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	f002 021f 	and.w	r2, r2, #31
 800134a:	2101      	movs	r1, #1
 800134c:	fa01 f202 	lsl.w	r2, r1, r2
 8001350:	4013      	ands	r3, r2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1ad      	bne.n	80012b2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800135a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 8110 	beq.w	800158c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001370:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d079      	beq.n	8001470 <HAL_RCC_OscConfig+0x760>
 800137c:	2301      	movs	r3, #1
 800137e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001382:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001386:	fa93 f3a3 	rbit	r3, r3
 800138a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800138e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001392:	fab3 f383 	clz	r3, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	461a      	mov	r2, r3
 800139a:	4bab      	ldr	r3, [pc, #684]	; (8001648 <HAL_RCC_OscConfig+0x938>)
 800139c:	4413      	add	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	461a      	mov	r2, r3
 80013a2:	2301      	movs	r3, #1
 80013a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a6:	f7ff fa13 	bl	80007d0 <HAL_GetTick>
 80013aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ae:	e00a      	b.n	80013c6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b0:	f7ff fa0e 	bl	80007d0 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d902      	bls.n	80013c6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	f000 bcdb 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>
 80013c6:	2302      	movs	r3, #2
 80013c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013d0:	fa93 f3a3 	rbit	r3, r3
 80013d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80013d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013dc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013e0:	2202      	movs	r2, #2
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013e8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	fa93 f2a3 	rbit	r2, r3
 80013f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001404:	2202      	movs	r2, #2
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	fa93 f2a3 	rbit	r2, r3
 8001416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800141e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001420:	4b88      	ldr	r3, [pc, #544]	; (8001644 <HAL_RCC_OscConfig+0x934>)
 8001422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001428:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800142c:	2102      	movs	r1, #2
 800142e:	6019      	str	r1, [r3, #0]
 8001430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001434:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	fa93 f1a3 	rbit	r1, r3
 800143e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001442:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001446:	6019      	str	r1, [r3, #0]
  return result;
 8001448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800144c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	fab3 f383 	clz	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f003 031f 	and.w	r3, r3, #31
 8001462:	2101      	movs	r1, #1
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0a0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x6a0>
 800146e:	e08d      	b.n	800158c <HAL_RCC_OscConfig+0x87c>
 8001470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001474:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001480:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	fa93 f2a3 	rbit	r2, r3
 800148a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800148e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001492:	601a      	str	r2, [r3, #0]
  return result;
 8001494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001498:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800149c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b68      	ldr	r3, [pc, #416]	; (8001648 <HAL_RCC_OscConfig+0x938>)
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	461a      	mov	r2, r3
 80014ae:	2300      	movs	r3, #0
 80014b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff f98d 	bl	80007d0 <HAL_GetTick>
 80014b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ba:	e00a      	b.n	80014d2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff f988 	bl	80007d0 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d902      	bls.n	80014d2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	f000 bc55 	b.w	8001d7c <HAL_RCC_OscConfig+0x106c>
 80014d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014da:	2202      	movs	r2, #2
 80014dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	fa93 f2a3 	rbit	r2, r3
 80014ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014fe:	2202      	movs	r2, #2
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001506:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	fa93 f2a3 	rbit	r2, r3
 8001510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001514:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001522:	2202      	movs	r2, #2
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	fa93 f2a3 	rbit	r2, r3
 8001534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001538:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800153c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153e:	4b41      	ldr	r3, [pc, #260]	; (8001644 <HAL_RCC_OscConfig+0x934>)
 8001540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001546:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800154a:	2102      	movs	r1, #2
 800154c:	6019      	str	r1, [r3, #0]
 800154e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001552:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	fa93 f1a3 	rbit	r1, r3
 800155c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001560:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001564:	6019      	str	r1, [r3, #0]
  return result;
 8001566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	fab3 f383 	clz	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800157a:	b2db      	uxtb	r3, r3
 800157c:	f003 031f 	and.w	r3, r3, #31
 8001580:	2101      	movs	r1, #1
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	4013      	ands	r3, r2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d197      	bne.n	80014bc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800158c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001590:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 81a1 	beq.w	80018e4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a8:	4b26      	ldr	r3, [pc, #152]	; (8001644 <HAL_RCC_OscConfig+0x934>)
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d116      	bne.n	80015e2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b4:	4b23      	ldr	r3, [pc, #140]	; (8001644 <HAL_RCC_OscConfig+0x934>)
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	4a22      	ldr	r2, [pc, #136]	; (8001644 <HAL_RCC_OscConfig+0x934>)
 80015ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015be:	61d3      	str	r3, [r2, #28]
 80015c0:	4b20      	ldr	r3, [pc, #128]	; (8001644 <HAL_RCC_OscConfig+0x934>)
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015cc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015da:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015dc:	2301      	movs	r3, #1
 80015de:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <HAL_RCC_OscConfig+0x93c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d11a      	bne.n	8001624 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <HAL_RCC_OscConfig+0x93c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a16      	ldr	r2, [pc, #88]	; (800164c <HAL_RCC_OscConfig+0x93c>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fa:	f7ff f8e9 	bl	80007d0 <HAL_GetTick>
 80015fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001602:	e009      	b.n	8001618 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001604:	f7ff f8e4 	bl	80007d0 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b64      	cmp	r3, #100	; 0x64
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e3b1      	b.n	8001d7c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_RCC_OscConfig+0x93c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0ef      	beq.n	8001604 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001628:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d10d      	bne.n	8001650 <HAL_RCC_OscConfig+0x940>
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <HAL_RCC_OscConfig+0x934>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a02      	ldr	r2, [pc, #8]	; (8001644 <HAL_RCC_OscConfig+0x934>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6213      	str	r3, [r2, #32]
 8001640:	e03c      	b.n	80016bc <HAL_RCC_OscConfig+0x9ac>
 8001642:	bf00      	nop
 8001644:	40021000 	.word	0x40021000
 8001648:	10908120 	.word	0x10908120
 800164c:	40007000 	.word	0x40007000
 8001650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001654:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10c      	bne.n	800167a <HAL_RCC_OscConfig+0x96a>
 8001660:	4bc1      	ldr	r3, [pc, #772]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4ac0      	ldr	r2, [pc, #768]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 8001666:	f023 0301 	bic.w	r3, r3, #1
 800166a:	6213      	str	r3, [r2, #32]
 800166c:	4bbe      	ldr	r3, [pc, #760]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4abd      	ldr	r2, [pc, #756]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 8001672:	f023 0304 	bic.w	r3, r3, #4
 8001676:	6213      	str	r3, [r2, #32]
 8001678:	e020      	b.n	80016bc <HAL_RCC_OscConfig+0x9ac>
 800167a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b05      	cmp	r3, #5
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x994>
 800168a:	4bb7      	ldr	r3, [pc, #732]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4ab6      	ldr	r2, [pc, #728]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	4bb4      	ldr	r3, [pc, #720]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4ab3      	ldr	r2, [pc, #716]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6213      	str	r3, [r2, #32]
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0x9ac>
 80016a4:	4bb0      	ldr	r3, [pc, #704]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4aaf      	ldr	r2, [pc, #700]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	6213      	str	r3, [r2, #32]
 80016b0:	4bad      	ldr	r3, [pc, #692]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4aac      	ldr	r2, [pc, #688]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 80016b6:	f023 0304 	bic.w	r3, r3, #4
 80016ba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 8081 	beq.w	80017d0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ce:	f7ff f87f 	bl	80007d0 <HAL_GetTick>
 80016d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d8:	f7ff f87a 	bl	80007d0 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e345      	b.n	8001d7c <HAL_RCC_OscConfig+0x106c>
 80016f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016f8:	2202      	movs	r2, #2
 80016fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001700:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	fa93 f2a3 	rbit	r2, r3
 800170a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001718:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800171c:	2202      	movs	r2, #2
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001724:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	fa93 f2a3 	rbit	r2, r3
 800172e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001732:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001736:	601a      	str	r2, [r3, #0]
  return result;
 8001738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800173c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001740:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001742:	fab3 f383 	clz	r3, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	095b      	lsrs	r3, r3, #5
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d102      	bne.n	800175c <HAL_RCC_OscConfig+0xa4c>
 8001756:	4b84      	ldr	r3, [pc, #528]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	e013      	b.n	8001784 <HAL_RCC_OscConfig+0xa74>
 800175c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001760:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001764:	2202      	movs	r2, #2
 8001766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	fa93 f2a3 	rbit	r2, r3
 8001776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	4b79      	ldr	r3, [pc, #484]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001788:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800178c:	2102      	movs	r1, #2
 800178e:	6011      	str	r1, [r2, #0]
 8001790:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001794:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	fa92 f1a2 	rbit	r1, r2
 800179e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017a2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017a6:	6011      	str	r1, [r2, #0]
  return result;
 80017a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017ac:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	fab2 f282 	clz	r2, r2
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	f002 021f 	and.w	r2, r2, #31
 80017c2:	2101      	movs	r1, #1
 80017c4:	fa01 f202 	lsl.w	r2, r1, r2
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d084      	beq.n	80016d8 <HAL_RCC_OscConfig+0x9c8>
 80017ce:	e07f      	b.n	80018d0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d0:	f7fe fffe 	bl	80007d0 <HAL_GetTick>
 80017d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d8:	e00b      	b.n	80017f2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7fe fff9 	bl	80007d0 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e2c4      	b.n	8001d7c <HAL_RCC_OscConfig+0x106c>
 80017f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017f6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017fa:	2202      	movs	r2, #2
 80017fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001802:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	fa93 f2a3 	rbit	r2, r3
 800180c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001810:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800181e:	2202      	movs	r2, #2
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001826:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	fa93 f2a3 	rbit	r2, r3
 8001830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001834:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001838:	601a      	str	r2, [r3, #0]
  return result;
 800183a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001842:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001844:	fab3 f383 	clz	r3, r3
 8001848:	b2db      	uxtb	r3, r3
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f043 0302 	orr.w	r3, r3, #2
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d102      	bne.n	800185e <HAL_RCC_OscConfig+0xb4e>
 8001858:	4b43      	ldr	r3, [pc, #268]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	e013      	b.n	8001886 <HAL_RCC_OscConfig+0xb76>
 800185e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001862:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001866:	2202      	movs	r2, #2
 8001868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	fa93 f2a3 	rbit	r2, r3
 8001878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800188a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800188e:	2102      	movs	r1, #2
 8001890:	6011      	str	r1, [r2, #0]
 8001892:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001896:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	fa92 f1a2 	rbit	r1, r2
 80018a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018a4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018a8:	6011      	str	r1, [r2, #0]
  return result;
 80018aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018ae:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	fab2 f282 	clz	r2, r2
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	f002 021f 	and.w	r2, r2, #31
 80018c4:	2101      	movs	r1, #1
 80018c6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ca:	4013      	ands	r3, r2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d184      	bne.n	80017da <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018d0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d105      	bne.n	80018e4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d8:	4b23      	ldr	r3, [pc, #140]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	4a22      	ldr	r2, [pc, #136]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 80018de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 8242 	beq.w	8001d7a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018f6:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <HAL_RCC_OscConfig+0xc58>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b08      	cmp	r3, #8
 8001900:	f000 8213 	beq.w	8001d2a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001908:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	2b02      	cmp	r3, #2
 8001912:	f040 8162 	bne.w	8001bda <HAL_RCC_OscConfig+0xeca>
 8001916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800191e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001922:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001928:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	fa93 f2a3 	rbit	r2, r3
 8001932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001936:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800193a:	601a      	str	r2, [r3, #0]
  return result;
 800193c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001940:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001944:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001950:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	461a      	mov	r2, r3
 8001958:	2300      	movs	r3, #0
 800195a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7fe ff38 	bl	80007d0 <HAL_GetTick>
 8001960:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001964:	e00c      	b.n	8001980 <HAL_RCC_OscConfig+0xc70>
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196c:	f7fe ff30 	bl	80007d0 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e1fd      	b.n	8001d7c <HAL_RCC_OscConfig+0x106c>
 8001980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001984:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001988:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800198c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001992:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	fa93 f2a3 	rbit	r2, r3
 800199c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019a4:	601a      	str	r2, [r3, #0]
  return result;
 80019a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019aa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b0:	fab3 f383 	clz	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	095b      	lsrs	r3, r3, #5
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d102      	bne.n	80019ca <HAL_RCC_OscConfig+0xcba>
 80019c4:	4bb0      	ldr	r3, [pc, #704]	; (8001c88 <HAL_RCC_OscConfig+0xf78>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	e027      	b.n	8001a1a <HAL_RCC_OscConfig+0xd0a>
 80019ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ce:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019dc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	fa93 f2a3 	rbit	r2, r3
 80019e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ea:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a02:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	fa93 f2a3 	rbit	r2, r3
 8001a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a10:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	4b9c      	ldr	r3, [pc, #624]	; (8001c88 <HAL_RCC_OscConfig+0xf78>)
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a1e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a22:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a26:	6011      	str	r1, [r2, #0]
 8001a28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a2c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a30:	6812      	ldr	r2, [r2, #0]
 8001a32:	fa92 f1a2 	rbit	r1, r2
 8001a36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a3a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a3e:	6011      	str	r1, [r2, #0]
  return result;
 8001a40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a44:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	fab2 f282 	clz	r2, r2
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	f042 0220 	orr.w	r2, r2, #32
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	f002 021f 	and.w	r2, r2, #31
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d182      	bne.n	800196c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a66:	4b88      	ldr	r3, [pc, #544]	; (8001c88 <HAL_RCC_OscConfig+0xf78>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	430b      	orrs	r3, r1
 8001a88:	497f      	ldr	r1, [pc, #508]	; (8001c88 <HAL_RCC_OscConfig+0xf78>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
 8001a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a92:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001a96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	fa93 f2a3 	rbit	r2, r3
 8001aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ab2:	601a      	str	r2, [r3, #0]
  return result;
 8001ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001abc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ac8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7fe fe7c 	bl	80007d0 <HAL_GetTick>
 8001ad8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001adc:	e009      	b.n	8001af2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ade:	f7fe fe77 	bl	80007d0 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e144      	b.n	8001d7c <HAL_RCC_OscConfig+0x106c>
 8001af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001afa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b04:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	fa93 f2a3 	rbit	r2, r3
 8001b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b12:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b16:	601a      	str	r2, [r3, #0]
  return result;
 8001b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b22:	fab3 f383 	clz	r3, r3
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	095b      	lsrs	r3, r3, #5
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d102      	bne.n	8001b3c <HAL_RCC_OscConfig+0xe2c>
 8001b36:	4b54      	ldr	r3, [pc, #336]	; (8001c88 <HAL_RCC_OscConfig+0xf78>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	e027      	b.n	8001b8c <HAL_RCC_OscConfig+0xe7c>
 8001b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b40:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	fa93 f2a3 	rbit	r2, r3
 8001b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b74:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	fa93 f2a3 	rbit	r2, r3
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <HAL_RCC_OscConfig+0xf78>)
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b90:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001b94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b98:	6011      	str	r1, [r2, #0]
 8001b9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b9e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	fa92 f1a2 	rbit	r1, r2
 8001ba8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bac:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bb0:	6011      	str	r1, [r2, #0]
  return result;
 8001bb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bb6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	fab2 f282 	clz	r2, r2
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	f042 0220 	orr.w	r2, r2, #32
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	f002 021f 	and.w	r2, r2, #31
 8001bcc:	2101      	movs	r1, #1
 8001bce:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d082      	beq.n	8001ade <HAL_RCC_OscConfig+0xdce>
 8001bd8:	e0cf      	b.n	8001d7a <HAL_RCC_OscConfig+0x106a>
 8001bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bde:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001be2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bec:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	fa93 f2a3 	rbit	r2, r3
 8001bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bfe:	601a      	str	r2, [r3, #0]
  return result;
 8001c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c04:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c08:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7fe fdd6 	bl	80007d0 <HAL_GetTick>
 8001c24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c28:	e009      	b.n	8001c3e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c2a:	f7fe fdd1 	bl	80007d0 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e09e      	b.n	8001d7c <HAL_RCC_OscConfig+0x106c>
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c50:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	fa93 f2a3 	rbit	r2, r3
 8001c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c62:	601a      	str	r2, [r3, #0]
  return result;
 8001c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c68:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	095b      	lsrs	r3, r3, #5
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d104      	bne.n	8001c8c <HAL_RCC_OscConfig+0xf7c>
 8001c82:	4b01      	ldr	r3, [pc, #4]	; (8001c88 <HAL_RCC_OscConfig+0xf78>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	e029      	b.n	8001cdc <HAL_RCC_OscConfig+0xfcc>
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	fa93 f2a3 	rbit	r2, r3
 8001ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	fa93 f2a3 	rbit	r2, r3
 8001cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <HAL_RCC_OscConfig+0x1078>)
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ce0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ce4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ce8:	6011      	str	r1, [r2, #0]
 8001cea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cee:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	fa92 f1a2 	rbit	r1, r2
 8001cf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cfc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d00:	6011      	str	r1, [r2, #0]
  return result;
 8001d02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d06:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	fab2 f282 	clz	r2, r2
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	f042 0220 	orr.w	r2, r2, #32
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	f002 021f 	and.w	r2, r2, #31
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d180      	bne.n	8001c2a <HAL_RCC_OscConfig+0xf1a>
 8001d28:	e027      	b.n	8001d7a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e01e      	b.n	8001d7c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d3e:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_RCC_OscConfig+0x1078>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d46:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d4a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d10b      	bne.n	8001d76 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d5e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40021000 	.word	0x40021000

08001d8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b09e      	sub	sp, #120	; 0x78
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e162      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4b90      	ldr	r3, [pc, #576]	; (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d910      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b8d      	ldr	r3, [pc, #564]	; (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 0207 	bic.w	r2, r3, #7
 8001dba:	498b      	ldr	r1, [pc, #556]	; (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b89      	ldr	r3, [pc, #548]	; (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e14a      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de0:	4b82      	ldr	r3, [pc, #520]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	497f      	ldr	r1, [pc, #508]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80dc 	beq.w	8001fb8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d13c      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xf6>
 8001e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e0c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d102      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xa6>
 8001e2c:	4b6f      	ldr	r3, [pc, #444]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	e00f      	b.n	8001e52 <HAL_RCC_ClockConfig+0xc6>
 8001e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e44:	663b      	str	r3, [r7, #96]	; 0x60
 8001e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e4e:	4b67      	ldr	r3, [pc, #412]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e56:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e5a:	fa92 f2a2 	rbit	r2, r2
 8001e5e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e62:	fab2 f282 	clz	r2, r2
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	f042 0220 	orr.w	r2, r2, #32
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	f002 021f 	and.w	r2, r2, #31
 8001e72:	2101      	movs	r1, #1
 8001e74:	fa01 f202 	lsl.w	r2, r1, r2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d17b      	bne.n	8001f76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0f3      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d13c      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x178>
 8001e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e8e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d102      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x128>
 8001eae:	4b4f      	ldr	r3, [pc, #316]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	e00f      	b.n	8001ed4 <HAL_RCC_ClockConfig+0x148>
 8001eb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ec2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ed0:	4b46      	ldr	r3, [pc, #280]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001eda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001edc:	fa92 f2a2 	rbit	r2, r2
 8001ee0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ee4:	fab2 f282 	clz	r2, r2
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	f042 0220 	orr.w	r2, r2, #32
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	f002 021f 	and.w	r2, r2, #31
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d13a      	bne.n	8001f76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0b2      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
 8001f04:	2302      	movs	r3, #2
 8001f06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0a:	fa93 f3a3 	rbit	r3, r3
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d102      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x1a0>
 8001f26:	4b31      	ldr	r3, [pc, #196]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	e00d      	b.n	8001f48 <HAL_RCC_ClockConfig+0x1bc>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
 8001f38:	2302      	movs	r3, #2
 8001f3a:	623b      	str	r3, [r7, #32]
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	61fb      	str	r3, [r7, #28]
 8001f44:	4b29      	ldr	r3, [pc, #164]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	2202      	movs	r2, #2
 8001f4a:	61ba      	str	r2, [r7, #24]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	fa92 f2a2 	rbit	r2, r2
 8001f52:	617a      	str	r2, [r7, #20]
  return result;
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	fab2 f282 	clz	r2, r2
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	f042 0220 	orr.w	r2, r2, #32
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	f002 021f 	and.w	r2, r2, #31
 8001f66:	2101      	movs	r1, #1
 8001f68:	fa01 f202 	lsl.w	r2, r1, r2
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e079      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f76:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f023 0203 	bic.w	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	491a      	ldr	r1, [pc, #104]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f88:	f7fe fc22 	bl	80007d0 <HAL_GetTick>
 8001f8c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f90:	f7fe fc1e 	bl	80007d0 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e061      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_RCC_ClockConfig+0x260>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 020c 	and.w	r2, r3, #12
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d1eb      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d214      	bcs.n	8001ff0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 0207 	bic.w	r2, r3, #7
 8001fce:	4906      	ldr	r1, [pc, #24]	; (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <HAL_RCC_ClockConfig+0x25c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e040      	b.n	800206a <HAL_RCC_ClockConfig+0x2de>
 8001fe8:	40022000 	.word	0x40022000
 8001fec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_RCC_ClockConfig+0x2e8>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	491a      	ldr	r1, [pc, #104]	; (8002074 <HAL_RCC_ClockConfig+0x2e8>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <HAL_RCC_ClockConfig+0x2e8>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4912      	ldr	r1, [pc, #72]	; (8002074 <HAL_RCC_ClockConfig+0x2e8>)
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800202e:	f000 f829 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8002032:	4601      	mov	r1, r0
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_RCC_ClockConfig+0x2e8>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800203c:	22f0      	movs	r2, #240	; 0xf0
 800203e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	fa92 f2a2 	rbit	r2, r2
 8002046:	60fa      	str	r2, [r7, #12]
  return result;
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	fab2 f282 	clz	r2, r2
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	40d3      	lsrs	r3, r2
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x2ec>)
 8002054:	5cd3      	ldrb	r3, [r2, r3]
 8002056:	fa21 f303 	lsr.w	r3, r1, r3
 800205a:	4a08      	ldr	r2, [pc, #32]	; (800207c <HAL_RCC_ClockConfig+0x2f0>)
 800205c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800205e:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_RCC_ClockConfig+0x2f4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fb70 	bl	8000748 <HAL_InitTick>
  
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3778      	adds	r7, #120	; 0x78
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	0800386c 	.word	0x0800386c
 800207c:	20000000 	.word	0x20000000
 8002080:	20000004 	.word	0x20000004

08002084 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002084:	b480      	push	{r7}
 8002086:	b08b      	sub	sp, #44	; 0x2c
 8002088:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d002      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0x30>
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d003      	beq.n	80020ba <HAL_RCC_GetSysClockFreq+0x36>
 80020b2:	e03c      	b.n	800212e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020b6:	623b      	str	r3, [r7, #32]
      break;
 80020b8:	e03c      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020c4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	fa92 f2a2 	rbit	r2, r2
 80020cc:	607a      	str	r2, [r7, #4]
  return result;
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	fab2 f282 	clz	r2, r2
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	40d3      	lsrs	r3, r2
 80020d8:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_RCC_GetSysClockFreq+0xc8>)
 80020da:	5cd3      	ldrb	r3, [r2, r3]
 80020dc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020de:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	220f      	movs	r2, #15
 80020e8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	fa92 f2a2 	rbit	r2, r2
 80020f0:	60fa      	str	r2, [r7, #12]
  return result;
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	fab2 f282 	clz	r2, r2
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	40d3      	lsrs	r3, r2
 80020fc:	4a14      	ldr	r2, [pc, #80]	; (8002150 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800210c:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <HAL_RCC_GetSysClockFreq+0xc4>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	fbb2 f2f3 	udiv	r2, r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
 800211c:	e004      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	4a0c      	ldr	r2, [pc, #48]	; (8002154 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	623b      	str	r3, [r7, #32]
      break;
 800212c:	e002      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002130:	623b      	str	r3, [r7, #32]
      break;
 8002132:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002134:	6a3b      	ldr	r3, [r7, #32]
}
 8002136:	4618      	mov	r0, r3
 8002138:	372c      	adds	r7, #44	; 0x2c
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
 8002148:	007a1200 	.word	0x007a1200
 800214c:	08003884 	.word	0x08003884
 8002150:	08003894 	.word	0x08003894
 8002154:	003d0900 	.word	0x003d0900

08002158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_RCC_GetHCLKFreq+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000000 	.word	0x20000000

08002170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002176:	f7ff ffef 	bl	8002158 <HAL_RCC_GetHCLKFreq>
 800217a:	4601      	mov	r1, r0
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_GetPCLK1Freq+0x3c>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002184:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002188:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	fa92 f2a2 	rbit	r2, r2
 8002190:	603a      	str	r2, [r7, #0]
  return result;
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	fab2 f282 	clz	r2, r2
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	40d3      	lsrs	r3, r2
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800219e:	5cd3      	ldrb	r3, [r2, r3]
 80021a0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	0800387c 	.word	0x0800387c

080021b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021ba:	f7ff ffcd 	bl	8002158 <HAL_RCC_GetHCLKFreq>
 80021be:	4601      	mov	r1, r0
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021cc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	fa92 f2a2 	rbit	r2, r2
 80021d4:	603a      	str	r2, [r7, #0]
  return result;
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	fab2 f282 	clz	r2, r2
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	40d3      	lsrs	r3, r2
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80021e2:	5cd3      	ldrb	r3, [r2, r3]
 80021e4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	0800387c 	.word	0x0800387c

080021f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e049      	b.n	800229e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d106      	bne.n	8002224 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe f982 	bl	8000528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2202      	movs	r2, #2
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3304      	adds	r3, #4
 8002234:	4619      	mov	r1, r3
 8002236:	4610      	mov	r0, r2
 8002238:	f000 fb60 	bl	80028fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e049      	b.n	800234c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d106      	bne.n	80022d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 f841 	bl	8002354 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2202      	movs	r2, #2
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3304      	adds	r3, #4
 80022e2:	4619      	mov	r1, r3
 80022e4:	4610      	mov	r0, r2
 80022e6:	f000 fb09 	bl	80028fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d109      	bne.n	800238c <HAL_TIM_PWM_Start+0x24>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b01      	cmp	r3, #1
 8002382:	bf14      	ite	ne
 8002384:	2301      	movne	r3, #1
 8002386:	2300      	moveq	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	e03c      	b.n	8002406 <HAL_TIM_PWM_Start+0x9e>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	2b04      	cmp	r3, #4
 8002390:	d109      	bne.n	80023a6 <HAL_TIM_PWM_Start+0x3e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	bf14      	ite	ne
 800239e:	2301      	movne	r3, #1
 80023a0:	2300      	moveq	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	e02f      	b.n	8002406 <HAL_TIM_PWM_Start+0x9e>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b08      	cmp	r3, #8
 80023aa:	d109      	bne.n	80023c0 <HAL_TIM_PWM_Start+0x58>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	bf14      	ite	ne
 80023b8:	2301      	movne	r3, #1
 80023ba:	2300      	moveq	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	e022      	b.n	8002406 <HAL_TIM_PWM_Start+0x9e>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d109      	bne.n	80023da <HAL_TIM_PWM_Start+0x72>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	bf14      	ite	ne
 80023d2:	2301      	movne	r3, #1
 80023d4:	2300      	moveq	r3, #0
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	e015      	b.n	8002406 <HAL_TIM_PWM_Start+0x9e>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b10      	cmp	r3, #16
 80023de:	d109      	bne.n	80023f4 <HAL_TIM_PWM_Start+0x8c>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	bf14      	ite	ne
 80023ec:	2301      	movne	r3, #1
 80023ee:	2300      	moveq	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	e008      	b.n	8002406 <HAL_TIM_PWM_Start+0x9e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	bf14      	ite	ne
 8002400:	2301      	movne	r3, #1
 8002402:	2300      	moveq	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e088      	b.n	8002520 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d104      	bne.n	800241e <HAL_TIM_PWM_Start+0xb6>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800241c:	e023      	b.n	8002466 <HAL_TIM_PWM_Start+0xfe>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b04      	cmp	r3, #4
 8002422:	d104      	bne.n	800242e <HAL_TIM_PWM_Start+0xc6>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800242c:	e01b      	b.n	8002466 <HAL_TIM_PWM_Start+0xfe>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b08      	cmp	r3, #8
 8002432:	d104      	bne.n	800243e <HAL_TIM_PWM_Start+0xd6>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800243c:	e013      	b.n	8002466 <HAL_TIM_PWM_Start+0xfe>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b0c      	cmp	r3, #12
 8002442:	d104      	bne.n	800244e <HAL_TIM_PWM_Start+0xe6>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800244c:	e00b      	b.n	8002466 <HAL_TIM_PWM_Start+0xfe>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b10      	cmp	r3, #16
 8002452:	d104      	bne.n	800245e <HAL_TIM_PWM_Start+0xf6>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800245c:	e003      	b.n	8002466 <HAL_TIM_PWM_Start+0xfe>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2202      	movs	r2, #2
 8002462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2201      	movs	r2, #1
 800246c:	6839      	ldr	r1, [r7, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f000 fdfc 	bl	800306c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2b      	ldr	r2, [pc, #172]	; (8002528 <HAL_TIM_PWM_Start+0x1c0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00e      	beq.n	800249c <HAL_TIM_PWM_Start+0x134>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2a      	ldr	r2, [pc, #168]	; (800252c <HAL_TIM_PWM_Start+0x1c4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d009      	beq.n	800249c <HAL_TIM_PWM_Start+0x134>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a28      	ldr	r2, [pc, #160]	; (8002530 <HAL_TIM_PWM_Start+0x1c8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d004      	beq.n	800249c <HAL_TIM_PWM_Start+0x134>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a27      	ldr	r2, [pc, #156]	; (8002534 <HAL_TIM_PWM_Start+0x1cc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_TIM_PWM_Start+0x138>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <HAL_TIM_PWM_Start+0x13a>
 80024a0:	2300      	movs	r3, #0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d007      	beq.n	80024b6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <HAL_TIM_PWM_Start+0x1c0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00e      	beq.n	80024de <HAL_TIM_PWM_Start+0x176>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c8:	d009      	beq.n	80024de <HAL_TIM_PWM_Start+0x176>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1a      	ldr	r2, [pc, #104]	; (8002538 <HAL_TIM_PWM_Start+0x1d0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d004      	beq.n	80024de <HAL_TIM_PWM_Start+0x176>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <HAL_TIM_PWM_Start+0x1c4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d115      	bne.n	800250a <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_TIM_PWM_Start+0x1d4>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b06      	cmp	r3, #6
 80024ee:	d015      	beq.n	800251c <HAL_TIM_PWM_Start+0x1b4>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f6:	d011      	beq.n	800251c <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002508:	e008      	b.n	800251c <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e000      	b.n	800251e <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40012c00 	.word	0x40012c00
 800252c:	40014000 	.word	0x40014000
 8002530:	40014400 	.word	0x40014400
 8002534:	40014800 	.word	0x40014800
 8002538:	40000400 	.word	0x40000400
 800253c:	00010007 	.word	0x00010007

08002540 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800255a:	2302      	movs	r3, #2
 800255c:	e0ff      	b.n	800275e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b14      	cmp	r3, #20
 800256a:	f200 80f0 	bhi.w	800274e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800256e:	a201      	add	r2, pc, #4	; (adr r2, 8002574 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002574:	080025c9 	.word	0x080025c9
 8002578:	0800274f 	.word	0x0800274f
 800257c:	0800274f 	.word	0x0800274f
 8002580:	0800274f 	.word	0x0800274f
 8002584:	08002609 	.word	0x08002609
 8002588:	0800274f 	.word	0x0800274f
 800258c:	0800274f 	.word	0x0800274f
 8002590:	0800274f 	.word	0x0800274f
 8002594:	0800264b 	.word	0x0800264b
 8002598:	0800274f 	.word	0x0800274f
 800259c:	0800274f 	.word	0x0800274f
 80025a0:	0800274f 	.word	0x0800274f
 80025a4:	0800268b 	.word	0x0800268b
 80025a8:	0800274f 	.word	0x0800274f
 80025ac:	0800274f 	.word	0x0800274f
 80025b0:	0800274f 	.word	0x0800274f
 80025b4:	080026cd 	.word	0x080026cd
 80025b8:	0800274f 	.word	0x0800274f
 80025bc:	0800274f 	.word	0x0800274f
 80025c0:	0800274f 	.word	0x0800274f
 80025c4:	0800270d 	.word	0x0800270d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fa0c 	bl	80029ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0208 	orr.w	r2, r2, #8
 80025e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0204 	bic.w	r2, r2, #4
 80025f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6999      	ldr	r1, [r3, #24]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	619a      	str	r2, [r3, #24]
      break;
 8002606:	e0a5      	b.n	8002754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fa72 	bl	8002af8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699a      	ldr	r2, [r3, #24]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6999      	ldr	r1, [r3, #24]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	021a      	lsls	r2, r3, #8
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	619a      	str	r2, [r3, #24]
      break;
 8002648:	e084      	b.n	8002754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	4618      	mov	r0, r3
 8002652:	f000 fad1 	bl	8002bf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69da      	ldr	r2, [r3, #28]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0208 	orr.w	r2, r2, #8
 8002664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69da      	ldr	r2, [r3, #28]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0204 	bic.w	r2, r2, #4
 8002674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	69d9      	ldr	r1, [r3, #28]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	61da      	str	r2, [r3, #28]
      break;
 8002688:	e064      	b.n	8002754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fb2f 	bl	8002cf4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69da      	ldr	r2, [r3, #28]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69da      	ldr	r2, [r3, #28]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69d9      	ldr	r1, [r3, #28]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	021a      	lsls	r2, r3, #8
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	61da      	str	r2, [r3, #28]
      break;
 80026ca:	e043      	b.n	8002754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68b9      	ldr	r1, [r7, #8]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fb72 	bl	8002dbc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0208 	orr.w	r2, r2, #8
 80026e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0204 	bic.w	r2, r2, #4
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800270a:	e023      	b.n	8002754 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fbb0 	bl	8002e78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002726:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002736:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	021a      	lsls	r2, r3, #8
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800274c:	e002      	b.n	8002754 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	75fb      	strb	r3, [r7, #23]
      break;
 8002752:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800275c:	7dfb      	ldrb	r3, [r7, #23]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop

08002768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_TIM_ConfigClockSource+0x1c>
 8002780:	2302      	movs	r3, #2
 8002782:	e0b6      	b.n	80028f2 <HAL_TIM_ConfigClockSource+0x18a>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027c0:	d03e      	beq.n	8002840 <HAL_TIM_ConfigClockSource+0xd8>
 80027c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027c6:	f200 8087 	bhi.w	80028d8 <HAL_TIM_ConfigClockSource+0x170>
 80027ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ce:	f000 8086 	beq.w	80028de <HAL_TIM_ConfigClockSource+0x176>
 80027d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d6:	d87f      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x170>
 80027d8:	2b70      	cmp	r3, #112	; 0x70
 80027da:	d01a      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0xaa>
 80027dc:	2b70      	cmp	r3, #112	; 0x70
 80027de:	d87b      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x170>
 80027e0:	2b60      	cmp	r3, #96	; 0x60
 80027e2:	d050      	beq.n	8002886 <HAL_TIM_ConfigClockSource+0x11e>
 80027e4:	2b60      	cmp	r3, #96	; 0x60
 80027e6:	d877      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x170>
 80027e8:	2b50      	cmp	r3, #80	; 0x50
 80027ea:	d03c      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0xfe>
 80027ec:	2b50      	cmp	r3, #80	; 0x50
 80027ee:	d873      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x170>
 80027f0:	2b40      	cmp	r3, #64	; 0x40
 80027f2:	d058      	beq.n	80028a6 <HAL_TIM_ConfigClockSource+0x13e>
 80027f4:	2b40      	cmp	r3, #64	; 0x40
 80027f6:	d86f      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x170>
 80027f8:	2b30      	cmp	r3, #48	; 0x30
 80027fa:	d064      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15e>
 80027fc:	2b30      	cmp	r3, #48	; 0x30
 80027fe:	d86b      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x170>
 8002800:	2b20      	cmp	r3, #32
 8002802:	d060      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15e>
 8002804:	2b20      	cmp	r3, #32
 8002806:	d867      	bhi.n	80028d8 <HAL_TIM_ConfigClockSource+0x170>
 8002808:	2b00      	cmp	r3, #0
 800280a:	d05c      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15e>
 800280c:	2b10      	cmp	r3, #16
 800280e:	d05a      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0x15e>
 8002810:	e062      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6899      	ldr	r1, [r3, #8]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f000 fc03 	bl	800302c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	609a      	str	r2, [r3, #8]
      break;
 800283e:	e04f      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	6899      	ldr	r1, [r3, #8]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f000 fbec 	bl	800302c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002862:	609a      	str	r2, [r3, #8]
      break;
 8002864:	e03c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6859      	ldr	r1, [r3, #4]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	461a      	mov	r2, r3
 8002874:	f000 fb60 	bl	8002f38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2150      	movs	r1, #80	; 0x50
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fbb9 	bl	8002ff6 <TIM_ITRx_SetConfig>
      break;
 8002884:	e02c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	6859      	ldr	r1, [r3, #4]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	461a      	mov	r2, r3
 8002894:	f000 fb7f 	bl	8002f96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2160      	movs	r1, #96	; 0x60
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fba9 	bl	8002ff6 <TIM_ITRx_SetConfig>
      break;
 80028a4:	e01c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6859      	ldr	r1, [r3, #4]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	461a      	mov	r2, r3
 80028b4:	f000 fb40 	bl	8002f38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2140      	movs	r1, #64	; 0x40
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fb99 	bl	8002ff6 <TIM_ITRx_SetConfig>
      break;
 80028c4:	e00c      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4619      	mov	r1, r3
 80028d0:	4610      	mov	r0, r2
 80028d2:	f000 fb90 	bl	8002ff6 <TIM_ITRx_SetConfig>
      break;
 80028d6:	e003      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      break;
 80028dc:	e000      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80028de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a32      	ldr	r2, [pc, #200]	; (80029d8 <TIM_Base_SetConfig+0xdc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d007      	beq.n	8002924 <TIM_Base_SetConfig+0x28>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291a:	d003      	beq.n	8002924 <TIM_Base_SetConfig+0x28>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a2f      	ldr	r2, [pc, #188]	; (80029dc <TIM_Base_SetConfig+0xe0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d108      	bne.n	8002936 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a27      	ldr	r2, [pc, #156]	; (80029d8 <TIM_Base_SetConfig+0xdc>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <TIM_Base_SetConfig+0x6a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002944:	d00f      	beq.n	8002966 <TIM_Base_SetConfig+0x6a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a24      	ldr	r2, [pc, #144]	; (80029dc <TIM_Base_SetConfig+0xe0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00b      	beq.n	8002966 <TIM_Base_SetConfig+0x6a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a23      	ldr	r2, [pc, #140]	; (80029e0 <TIM_Base_SetConfig+0xe4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <TIM_Base_SetConfig+0x6a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a22      	ldr	r2, [pc, #136]	; (80029e4 <TIM_Base_SetConfig+0xe8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d003      	beq.n	8002966 <TIM_Base_SetConfig+0x6a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a21      	ldr	r2, [pc, #132]	; (80029e8 <TIM_Base_SetConfig+0xec>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d108      	bne.n	8002978 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800296c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a0e      	ldr	r2, [pc, #56]	; (80029d8 <TIM_Base_SetConfig+0xdc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00b      	beq.n	80029bc <TIM_Base_SetConfig+0xc0>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a0e      	ldr	r2, [pc, #56]	; (80029e0 <TIM_Base_SetConfig+0xe4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d007      	beq.n	80029bc <TIM_Base_SetConfig+0xc0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <TIM_Base_SetConfig+0xe8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d003      	beq.n	80029bc <TIM_Base_SetConfig+0xc0>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <TIM_Base_SetConfig+0xec>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d103      	bne.n	80029c4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	615a      	str	r2, [r3, #20]
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	40000400 	.word	0x40000400
 80029e0:	40014000 	.word	0x40014000
 80029e4:	40014400 	.word	0x40014400
 80029e8:	40014800 	.word	0x40014800

080029ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	f023 0201 	bic.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0303 	bic.w	r3, r3, #3
 8002a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f023 0302 	bic.w	r3, r3, #2
 8002a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a28      	ldr	r2, [pc, #160]	; (8002ae8 <TIM_OC1_SetConfig+0xfc>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00b      	beq.n	8002a64 <TIM_OC1_SetConfig+0x78>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a27      	ldr	r2, [pc, #156]	; (8002aec <TIM_OC1_SetConfig+0x100>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d007      	beq.n	8002a64 <TIM_OC1_SetConfig+0x78>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a26      	ldr	r2, [pc, #152]	; (8002af0 <TIM_OC1_SetConfig+0x104>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d003      	beq.n	8002a64 <TIM_OC1_SetConfig+0x78>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a25      	ldr	r2, [pc, #148]	; (8002af4 <TIM_OC1_SetConfig+0x108>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d10c      	bne.n	8002a7e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f023 0308 	bic.w	r3, r3, #8
 8002a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <TIM_OC1_SetConfig+0xfc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00b      	beq.n	8002a9e <TIM_OC1_SetConfig+0xb2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a18      	ldr	r2, [pc, #96]	; (8002aec <TIM_OC1_SetConfig+0x100>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <TIM_OC1_SetConfig+0xb2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a17      	ldr	r2, [pc, #92]	; (8002af0 <TIM_OC1_SetConfig+0x104>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d003      	beq.n	8002a9e <TIM_OC1_SetConfig+0xb2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a16      	ldr	r2, [pc, #88]	; (8002af4 <TIM_OC1_SetConfig+0x108>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d111      	bne.n	8002ac2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	621a      	str	r2, [r3, #32]
}
 8002adc:	bf00      	nop
 8002ade:	371c      	adds	r7, #28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	40014000 	.word	0x40014000
 8002af0:	40014400 	.word	0x40014400
 8002af4:	40014800 	.word	0x40014800

08002af8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f023 0210 	bic.w	r2, r3, #16
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f023 0320 	bic.w	r3, r3, #32
 8002b46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a24      	ldr	r2, [pc, #144]	; (8002be8 <TIM_OC2_SetConfig+0xf0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d10d      	bne.n	8002b78 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a1b      	ldr	r2, [pc, #108]	; (8002be8 <TIM_OC2_SetConfig+0xf0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d00b      	beq.n	8002b98 <TIM_OC2_SetConfig+0xa0>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a1a      	ldr	r2, [pc, #104]	; (8002bec <TIM_OC2_SetConfig+0xf4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d007      	beq.n	8002b98 <TIM_OC2_SetConfig+0xa0>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <TIM_OC2_SetConfig+0xf8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d003      	beq.n	8002b98 <TIM_OC2_SetConfig+0xa0>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <TIM_OC2_SetConfig+0xfc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d113      	bne.n	8002bc0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b9e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ba6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	621a      	str	r2, [r3, #32]
}
 8002bda:	bf00      	nop
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40012c00 	.word	0x40012c00
 8002bec:	40014000 	.word	0x40014000
 8002bf0:	40014400 	.word	0x40014400
 8002bf4:	40014800 	.word	0x40014800

08002bf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0303 	bic.w	r3, r3, #3
 8002c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a23      	ldr	r2, [pc, #140]	; (8002ce4 <TIM_OC3_SetConfig+0xec>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d10d      	bne.n	8002c76 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c74:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a1a      	ldr	r2, [pc, #104]	; (8002ce4 <TIM_OC3_SetConfig+0xec>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00b      	beq.n	8002c96 <TIM_OC3_SetConfig+0x9e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a19      	ldr	r2, [pc, #100]	; (8002ce8 <TIM_OC3_SetConfig+0xf0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d007      	beq.n	8002c96 <TIM_OC3_SetConfig+0x9e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a18      	ldr	r2, [pc, #96]	; (8002cec <TIM_OC3_SetConfig+0xf4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d003      	beq.n	8002c96 <TIM_OC3_SetConfig+0x9e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <TIM_OC3_SetConfig+0xf8>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d113      	bne.n	8002cbe <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	621a      	str	r2, [r3, #32]
}
 8002cd8:	bf00      	nop
 8002cda:	371c      	adds	r7, #28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	40012c00 	.word	0x40012c00
 8002ce8:	40014000 	.word	0x40014000
 8002cec:	40014400 	.word	0x40014400
 8002cf0:	40014800 	.word	0x40014800

08002cf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	031b      	lsls	r3, r3, #12
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a16      	ldr	r2, [pc, #88]	; (8002dac <TIM_OC4_SetConfig+0xb8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d00b      	beq.n	8002d70 <TIM_OC4_SetConfig+0x7c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a15      	ldr	r2, [pc, #84]	; (8002db0 <TIM_OC4_SetConfig+0xbc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d007      	beq.n	8002d70 <TIM_OC4_SetConfig+0x7c>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <TIM_OC4_SetConfig+0xc0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d003      	beq.n	8002d70 <TIM_OC4_SetConfig+0x7c>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a13      	ldr	r2, [pc, #76]	; (8002db8 <TIM_OC4_SetConfig+0xc4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d109      	bne.n	8002d84 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	019b      	lsls	r3, r3, #6
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	621a      	str	r2, [r3, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40012c00 	.word	0x40012c00
 8002db0:	40014000 	.word	0x40014000
 8002db4:	40014400 	.word	0x40014400
 8002db8:	40014800 	.word	0x40014800

08002dbc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002e00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	041b      	lsls	r3, r3, #16
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a15      	ldr	r2, [pc, #84]	; (8002e68 <TIM_OC5_SetConfig+0xac>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00b      	beq.n	8002e2e <TIM_OC5_SetConfig+0x72>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a14      	ldr	r2, [pc, #80]	; (8002e6c <TIM_OC5_SetConfig+0xb0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d007      	beq.n	8002e2e <TIM_OC5_SetConfig+0x72>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a13      	ldr	r2, [pc, #76]	; (8002e70 <TIM_OC5_SetConfig+0xb4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d003      	beq.n	8002e2e <TIM_OC5_SetConfig+0x72>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <TIM_OC5_SetConfig+0xb8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d109      	bne.n	8002e42 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	621a      	str	r2, [r3, #32]
}
 8002e5c:	bf00      	nop
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40012c00 	.word	0x40012c00
 8002e6c:	40014000 	.word	0x40014000
 8002e70:	40014400 	.word	0x40014400
 8002e74:	40014800 	.word	0x40014800

08002e78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	021b      	lsls	r3, r3, #8
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	051b      	lsls	r3, r3, #20
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a16      	ldr	r2, [pc, #88]	; (8002f28 <TIM_OC6_SetConfig+0xb0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00b      	beq.n	8002eec <TIM_OC6_SetConfig+0x74>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a15      	ldr	r2, [pc, #84]	; (8002f2c <TIM_OC6_SetConfig+0xb4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d007      	beq.n	8002eec <TIM_OC6_SetConfig+0x74>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <TIM_OC6_SetConfig+0xb8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d003      	beq.n	8002eec <TIM_OC6_SetConfig+0x74>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <TIM_OC6_SetConfig+0xbc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d109      	bne.n	8002f00 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	029b      	lsls	r3, r3, #10
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	621a      	str	r2, [r3, #32]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40012c00 	.word	0x40012c00
 8002f2c:	40014000 	.word	0x40014000
 8002f30:	40014400 	.word	0x40014400
 8002f34:	40014800 	.word	0x40014800

08002f38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f023 0201 	bic.w	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f023 030a 	bic.w	r3, r3, #10
 8002f74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	621a      	str	r2, [r3, #32]
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b087      	sub	sp, #28
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f023 0210 	bic.w	r2, r3, #16
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	031b      	lsls	r3, r3, #12
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	621a      	str	r2, [r3, #32]
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b085      	sub	sp, #20
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	f043 0307 	orr.w	r3, r3, #7
 8003018:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	609a      	str	r2, [r3, #8]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
 8003038:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003046:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	021a      	lsls	r2, r3, #8
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	431a      	orrs	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	4313      	orrs	r3, r2
 8003058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	609a      	str	r2, [r3, #8]
}
 8003060:	bf00      	nop
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	2201      	movs	r2, #1
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a1a      	ldr	r2, [r3, #32]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	43db      	mvns	r3, r3
 800308e:	401a      	ands	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a1a      	ldr	r2, [r3, #32]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	431a      	orrs	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	621a      	str	r2, [r3, #32]
}
 80030aa:	bf00      	nop
 80030ac:	371c      	adds	r7, #28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e054      	b.n	800317a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a24      	ldr	r2, [pc, #144]	; (8003188 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d108      	bne.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003100:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4313      	orrs	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003112:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a17      	ldr	r2, [pc, #92]	; (8003188 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00e      	beq.n	800314e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003138:	d009      	beq.n	800314e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a13      	ldr	r2, [pc, #76]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d004      	beq.n	800314e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a11      	ldr	r2, [pc, #68]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d10c      	bne.n	8003168 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003154:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	4313      	orrs	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40012c00 	.word	0x40012c00
 800318c:	40000400 	.word	0x40000400
 8003190:	40014000 	.word	0x40014000

08003194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e040      	b.n	8003228 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7fd fa08 	bl	80005cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2224      	movs	r2, #36	; 0x24
 80031c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0201 	bic.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f82c 	bl	8003230 <UART_SetConfig>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e022      	b.n	8003228 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f956 	bl	800349c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800320e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f9dd 	bl	80035e0 <UART_CheckIdleState>
 8003226:	4603      	mov	r3, r0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	4313      	orrs	r3, r2
 8003252:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	4b8a      	ldr	r3, [pc, #552]	; (8003484 <UART_SetConfig+0x254>)
 800325c:	4013      	ands	r3, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6812      	ldr	r2, [r2, #0]
 8003262:	6979      	ldr	r1, [r7, #20]
 8003264:	430b      	orrs	r3, r1
 8003266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	430a      	orrs	r2, r1
 80032a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a78      	ldr	r2, [pc, #480]	; (8003488 <UART_SetConfig+0x258>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d120      	bne.n	80032ee <UART_SetConfig+0xbe>
 80032ac:	4b77      	ldr	r3, [pc, #476]	; (800348c <UART_SetConfig+0x25c>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	f003 0303 	and.w	r3, r3, #3
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d817      	bhi.n	80032e8 <UART_SetConfig+0xb8>
 80032b8:	a201      	add	r2, pc, #4	; (adr r2, 80032c0 <UART_SetConfig+0x90>)
 80032ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032be:	bf00      	nop
 80032c0:	080032d1 	.word	0x080032d1
 80032c4:	080032dd 	.word	0x080032dd
 80032c8:	080032e3 	.word	0x080032e3
 80032cc:	080032d7 	.word	0x080032d7
 80032d0:	2300      	movs	r3, #0
 80032d2:	77fb      	strb	r3, [r7, #31]
 80032d4:	e01d      	b.n	8003312 <UART_SetConfig+0xe2>
 80032d6:	2302      	movs	r3, #2
 80032d8:	77fb      	strb	r3, [r7, #31]
 80032da:	e01a      	b.n	8003312 <UART_SetConfig+0xe2>
 80032dc:	2304      	movs	r3, #4
 80032de:	77fb      	strb	r3, [r7, #31]
 80032e0:	e017      	b.n	8003312 <UART_SetConfig+0xe2>
 80032e2:	2308      	movs	r3, #8
 80032e4:	77fb      	strb	r3, [r7, #31]
 80032e6:	e014      	b.n	8003312 <UART_SetConfig+0xe2>
 80032e8:	2310      	movs	r3, #16
 80032ea:	77fb      	strb	r3, [r7, #31]
 80032ec:	e011      	b.n	8003312 <UART_SetConfig+0xe2>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a67      	ldr	r2, [pc, #412]	; (8003490 <UART_SetConfig+0x260>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d102      	bne.n	80032fe <UART_SetConfig+0xce>
 80032f8:	2300      	movs	r3, #0
 80032fa:	77fb      	strb	r3, [r7, #31]
 80032fc:	e009      	b.n	8003312 <UART_SetConfig+0xe2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a64      	ldr	r2, [pc, #400]	; (8003494 <UART_SetConfig+0x264>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d102      	bne.n	800330e <UART_SetConfig+0xde>
 8003308:	2300      	movs	r3, #0
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e001      	b.n	8003312 <UART_SetConfig+0xe2>
 800330e:	2310      	movs	r3, #16
 8003310:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800331a:	d15b      	bne.n	80033d4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800331c:	7ffb      	ldrb	r3, [r7, #31]
 800331e:	2b08      	cmp	r3, #8
 8003320:	d827      	bhi.n	8003372 <UART_SetConfig+0x142>
 8003322:	a201      	add	r2, pc, #4	; (adr r2, 8003328 <UART_SetConfig+0xf8>)
 8003324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003328:	0800334d 	.word	0x0800334d
 800332c:	08003355 	.word	0x08003355
 8003330:	0800335d 	.word	0x0800335d
 8003334:	08003373 	.word	0x08003373
 8003338:	08003363 	.word	0x08003363
 800333c:	08003373 	.word	0x08003373
 8003340:	08003373 	.word	0x08003373
 8003344:	08003373 	.word	0x08003373
 8003348:	0800336b 	.word	0x0800336b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800334c:	f7fe ff10 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8003350:	61b8      	str	r0, [r7, #24]
        break;
 8003352:	e013      	b.n	800337c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003354:	f7fe ff2e 	bl	80021b4 <HAL_RCC_GetPCLK2Freq>
 8003358:	61b8      	str	r0, [r7, #24]
        break;
 800335a:	e00f      	b.n	800337c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800335c:	4b4e      	ldr	r3, [pc, #312]	; (8003498 <UART_SetConfig+0x268>)
 800335e:	61bb      	str	r3, [r7, #24]
        break;
 8003360:	e00c      	b.n	800337c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003362:	f7fe fe8f 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8003366:	61b8      	str	r0, [r7, #24]
        break;
 8003368:	e008      	b.n	800337c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800336a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800336e:	61bb      	str	r3, [r7, #24]
        break;
 8003370:	e004      	b.n	800337c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	77bb      	strb	r3, [r7, #30]
        break;
 800337a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d074      	beq.n	800346c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	005a      	lsls	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	085b      	lsrs	r3, r3, #1
 800338c:	441a      	add	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	fbb2 f3f3 	udiv	r3, r2, r3
 8003396:	b29b      	uxth	r3, r3
 8003398:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b0f      	cmp	r3, #15
 800339e:	d916      	bls.n	80033ce <UART_SetConfig+0x19e>
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a6:	d212      	bcs.n	80033ce <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f023 030f 	bic.w	r3, r3, #15
 80033b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	b29a      	uxth	r2, r3
 80033be:	89fb      	ldrh	r3, [r7, #14]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	89fa      	ldrh	r2, [r7, #14]
 80033ca:	60da      	str	r2, [r3, #12]
 80033cc:	e04e      	b.n	800346c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	77bb      	strb	r3, [r7, #30]
 80033d2:	e04b      	b.n	800346c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033d4:	7ffb      	ldrb	r3, [r7, #31]
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d827      	bhi.n	800342a <UART_SetConfig+0x1fa>
 80033da:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <UART_SetConfig+0x1b0>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	08003405 	.word	0x08003405
 80033e4:	0800340d 	.word	0x0800340d
 80033e8:	08003415 	.word	0x08003415
 80033ec:	0800342b 	.word	0x0800342b
 80033f0:	0800341b 	.word	0x0800341b
 80033f4:	0800342b 	.word	0x0800342b
 80033f8:	0800342b 	.word	0x0800342b
 80033fc:	0800342b 	.word	0x0800342b
 8003400:	08003423 	.word	0x08003423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003404:	f7fe feb4 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8003408:	61b8      	str	r0, [r7, #24]
        break;
 800340a:	e013      	b.n	8003434 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800340c:	f7fe fed2 	bl	80021b4 <HAL_RCC_GetPCLK2Freq>
 8003410:	61b8      	str	r0, [r7, #24]
        break;
 8003412:	e00f      	b.n	8003434 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003414:	4b20      	ldr	r3, [pc, #128]	; (8003498 <UART_SetConfig+0x268>)
 8003416:	61bb      	str	r3, [r7, #24]
        break;
 8003418:	e00c      	b.n	8003434 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800341a:	f7fe fe33 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 800341e:	61b8      	str	r0, [r7, #24]
        break;
 8003420:	e008      	b.n	8003434 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003426:	61bb      	str	r3, [r7, #24]
        break;
 8003428:	e004      	b.n	8003434 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	77bb      	strb	r3, [r7, #30]
        break;
 8003432:	bf00      	nop
    }

    if (pclk != 0U)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d018      	beq.n	800346c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	085a      	lsrs	r2, r3, #1
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	441a      	add	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	fbb2 f3f3 	udiv	r3, r2, r3
 800344c:	b29b      	uxth	r3, r3
 800344e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2b0f      	cmp	r3, #15
 8003454:	d908      	bls.n	8003468 <UART_SetConfig+0x238>
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345c:	d204      	bcs.n	8003468 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	e001      	b.n	800346c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003478:	7fbb      	ldrb	r3, [r7, #30]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	efff69f3 	.word	0xefff69f3
 8003488:	40013800 	.word	0x40013800
 800348c:	40021000 	.word	0x40021000
 8003490:	40004400 	.word	0x40004400
 8003494:	40004800 	.word	0x40004800
 8003498:	007a1200 	.word	0x007a1200

0800349c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	f003 0310 	and.w	r3, r3, #16
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01a      	beq.n	80035b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800359a:	d10a      	bne.n	80035b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	605a      	str	r2, [r3, #4]
  }
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035f0:	f7fd f8ee 	bl	80007d0 <HAL_GetTick>
 80035f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	2b08      	cmp	r3, #8
 8003602:	d10e      	bne.n	8003622 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f82d 	bl	8003672 <UART_WaitOnFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e023      	b.n	800366a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b04      	cmp	r3, #4
 800362e:	d10e      	bne.n	800364e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003630:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f817 	bl	8003672 <UART_WaitOnFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e00d      	b.n	800366a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b09c      	sub	sp, #112	; 0x70
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	603b      	str	r3, [r7, #0]
 800367e:	4613      	mov	r3, r2
 8003680:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003682:	e0a5      	b.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368a:	f000 80a1 	beq.w	80037d0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368e:	f7fd f89f 	bl	80007d0 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800369a:	429a      	cmp	r2, r3
 800369c:	d302      	bcc.n	80036a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800369e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d13e      	bne.n	8003722 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ac:	e853 3f00 	ldrex	r3, [r3]
 80036b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80036b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036b8:	667b      	str	r3, [r7, #100]	; 0x64
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80036c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036ca:	e841 2300 	strex	r3, r2, [r1]
 80036ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80036d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1e6      	bne.n	80036a4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3308      	adds	r3, #8
 80036dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e0:	e853 3f00 	ldrex	r3, [r3]
 80036e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	663b      	str	r3, [r7, #96]	; 0x60
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3308      	adds	r3, #8
 80036f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80036f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036fe:	e841 2300 	strex	r3, r2, [r1]
 8003702:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1e5      	bne.n	80036d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2220      	movs	r2, #32
 800370e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e067      	b.n	80037f2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d04f      	beq.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800373a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800373e:	d147      	bne.n	80037d0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003748:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800375e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003768:	637b      	str	r3, [r7, #52]	; 0x34
 800376a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800376e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e6      	bne.n	800374a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3308      	adds	r3, #8
 8003782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	e853 3f00 	ldrex	r3, [r3]
 800378a:	613b      	str	r3, [r7, #16]
   return(result);
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f023 0301 	bic.w	r3, r3, #1
 8003792:	66bb      	str	r3, [r7, #104]	; 0x68
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3308      	adds	r3, #8
 800379a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800379c:	623a      	str	r2, [r7, #32]
 800379e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a0:	69f9      	ldr	r1, [r7, #28]
 80037a2:	6a3a      	ldr	r2, [r7, #32]
 80037a4:	e841 2300 	strex	r3, r2, [r1]
 80037a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e5      	bne.n	800377c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2220      	movs	r2, #32
 80037ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e010      	b.n	80037f2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4013      	ands	r3, r2
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	429a      	cmp	r2, r3
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	461a      	mov	r2, r3
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	f43f af4a 	beq.w	8003684 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3770      	adds	r7, #112	; 0x70
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <__libc_init_array>:
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	4d0d      	ldr	r5, [pc, #52]	; (8003834 <__libc_init_array+0x38>)
 8003800:	4c0d      	ldr	r4, [pc, #52]	; (8003838 <__libc_init_array+0x3c>)
 8003802:	1b64      	subs	r4, r4, r5
 8003804:	10a4      	asrs	r4, r4, #2
 8003806:	2600      	movs	r6, #0
 8003808:	42a6      	cmp	r6, r4
 800380a:	d109      	bne.n	8003820 <__libc_init_array+0x24>
 800380c:	4d0b      	ldr	r5, [pc, #44]	; (800383c <__libc_init_array+0x40>)
 800380e:	4c0c      	ldr	r4, [pc, #48]	; (8003840 <__libc_init_array+0x44>)
 8003810:	f000 f820 	bl	8003854 <_init>
 8003814:	1b64      	subs	r4, r4, r5
 8003816:	10a4      	asrs	r4, r4, #2
 8003818:	2600      	movs	r6, #0
 800381a:	42a6      	cmp	r6, r4
 800381c:	d105      	bne.n	800382a <__libc_init_array+0x2e>
 800381e:	bd70      	pop	{r4, r5, r6, pc}
 8003820:	f855 3b04 	ldr.w	r3, [r5], #4
 8003824:	4798      	blx	r3
 8003826:	3601      	adds	r6, #1
 8003828:	e7ee      	b.n	8003808 <__libc_init_array+0xc>
 800382a:	f855 3b04 	ldr.w	r3, [r5], #4
 800382e:	4798      	blx	r3
 8003830:	3601      	adds	r6, #1
 8003832:	e7f2      	b.n	800381a <__libc_init_array+0x1e>
 8003834:	080038a4 	.word	0x080038a4
 8003838:	080038a4 	.word	0x080038a4
 800383c:	080038a4 	.word	0x080038a4
 8003840:	080038a8 	.word	0x080038a8

08003844 <memset>:
 8003844:	4402      	add	r2, r0
 8003846:	4603      	mov	r3, r0
 8003848:	4293      	cmp	r3, r2
 800384a:	d100      	bne.n	800384e <memset+0xa>
 800384c:	4770      	bx	lr
 800384e:	f803 1b01 	strb.w	r1, [r3], #1
 8003852:	e7f9      	b.n	8003848 <memset+0x4>

08003854 <_init>:
 8003854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003856:	bf00      	nop
 8003858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385a:	bc08      	pop	{r3}
 800385c:	469e      	mov	lr, r3
 800385e:	4770      	bx	lr

08003860 <_fini>:
 8003860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003862:	bf00      	nop
 8003864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003866:	bc08      	pop	{r3}
 8003868:	469e      	mov	lr, r3
 800386a:	4770      	bx	lr
